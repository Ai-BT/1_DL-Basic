# %%
import numpy as np

# Mean Squared Error
# 손실함수는 신경망 성능의 나쁨을 나타내는 지표
# 즉, 작을 수록 좋은 성능이라고 생각 하면 된다. 
# 혹은 - 를 곱해서 반대로 생각하는 지표로 사용 가능하다.

def mean_squared_error(y, t):
    return 0.5 * np.sum((y-t)**2)

# 정답은 '2'
t = [0, 0, 1, 0, 0, 0, 0, 0, 0, 0]

# '2'일 확률이 가장 높다고 추정함
y = [0.1, 0.05, 0.6, 0.0, 0.05, 0.1, 0.0, 0.1, 0.0, 0.0]
mean_squared_error(np.array(y), np.array(t)) # 0.0975

# '7'일 확률이 가장 높다고 추정함
y = [0.1, 0.05, 0.1, 0.0, 0.05, 0.1, 0.0, 0.6, 0.0, 0.0]
mean_squared_error(np.array(y), np.array(t)) # 0.5975

# 손실 함수 쪽 출력이 작으면,
# 정답 레이블과의 오차도 작은 것을 알 수 있습니다.
# 즉, MSE 기준으로 첫번째 추정 결과가 정답에 가깝다고 판단 가능


# %%
